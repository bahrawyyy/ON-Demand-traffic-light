
egyFwd_Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000e5a  00000eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080007c  0080007c  00000f0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e98  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001028  00000000  00000000  00003afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00004b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000837  00000000  00000000  00004f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c71  00000000  00000000  0000578b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000063fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_1>
   8:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_2>
   c:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 01 	call	0x398	; 0x398 <main>
  8a:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ChooseMode>:

/************************************************************************/
/* This function to choose between normal mode and pedsterian mode based on the argument  */
/************************************************************************/

void ChooseMode(Mode_Selected Mode){
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	00 d0       	rcall	.+0      	; 0x9a <ChooseMode+0x8>
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	if(Mode == NORMAL_MODE){
  a0:	81 11       	cpse	r24, r1
  a2:	2e c0       	rjmp	.+92     	; 0x100 <ChooseMode+0x6e>
		LED_ON(LED_GREEN_CARS);
  a4:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		Timer0_delay_ms(5000);
  a8:	68 e8       	ldi	r22, 0x88	; 136
  aa:	73 e1       	ldi	r23, 0x13	; 19
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
		// Yellow LED blinking for 5 seconds
		for (uint8_t i = 0;i<5;i++)
  b4:	10 e0       	ldi	r17, 0x00	; 0
  b6:	07 c0       	rjmp	.+14     	; 0xc6 <ChooseMode+0x34>
		{
			LED_OFF(LED_GREEN_CARS);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			YellowBlink(LED_YELLOW_CARS);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <YellowBlink>
void ChooseMode(Mode_Selected Mode){
	if(Mode == NORMAL_MODE){
		LED_ON(LED_GREEN_CARS);
		Timer0_delay_ms(5000);
		// Yellow LED blinking for 5 seconds
		for (uint8_t i = 0;i<5;i++)
  c4:	1f 5f       	subi	r17, 0xFF	; 255
  c6:	15 30       	cpi	r17, 0x05	; 5
  c8:	b8 f3       	brcs	.-18     	; 0xb8 <ChooseMode+0x26>
		{
			LED_OFF(LED_GREEN_CARS);
			YellowBlink(LED_YELLOW_CARS);
		}
		LED_OFF(LED_YELLOW_CARS);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
		LED_ON(LED_RED_CARS);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		Timer0_delay_ms(5000);
  d6:	68 e8       	ldi	r22, 0x88	; 136
  d8:	73 e1       	ldi	r23, 0x13	; 19
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
		for (uint8_t i = 0;i<5;i++)
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	0a c0       	rjmp	.+20     	; 0xfa <ChooseMode+0x68>
		{
			LED_OFF(LED_RED_CARS);
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			LED_OFF(LED_GREEN_PEDS);
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			YellowBlink(LED_YELLOW_CARS);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <YellowBlink>
			YellowBlink(LED_YELLOW_CARS);
		}
		LED_OFF(LED_YELLOW_CARS);
		LED_ON(LED_RED_CARS);
		Timer0_delay_ms(5000);
		for (uint8_t i = 0;i<5;i++)
  f8:	1f 5f       	subi	r17, 0xFF	; 255
  fa:	15 30       	cpi	r17, 0x05	; 5
  fc:	a0 f3       	brcs	.-24     	; 0xe6 <ChooseMode+0x54>
  fe:	82 c0       	rjmp	.+260    	; 0x204 <ChooseMode+0x172>
		{
			LED_OFF(LED_RED_CARS);
			LED_OFF(LED_GREEN_PEDS);
			YellowBlink(LED_YELLOW_CARS);
		}
		}else if(Mode == PEDESTRIAN_MODE){
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	09 f0       	breq	.+2      	; 0x106 <ChooseMode+0x74>
 104:	7f c0       	rjmp	.+254    	; 0x204 <ChooseMode+0x172>
		uint8_t ledredval,ledyellowval,ledgreenval;
		Dio_read(LED_RED_CARS,&ledredval);
 106:	be 01       	movw	r22, r28
 108:	6d 5f       	subi	r22, 0xFD	; 253
 10a:	7f 4f       	sbci	r23, 0xFF	; 255
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Dio_read>
		Dio_read(LED_GREEN_CARS,&ledgreenval);
 112:	be 01       	movw	r22, r28
 114:	6f 5f       	subi	r22, 0xFF	; 255
 116:	7f 4f       	sbci	r23, 0xFF	; 255
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Dio_read>
		Dio_read(LED_YELLOW_CARS,&ledyellowval);
 11e:	be 01       	movw	r22, r28
 120:	6e 5f       	subi	r22, 0xFE	; 254
 122:	7f 4f       	sbci	r23, 0xFF	; 255
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Dio_read>
		if(ledredval == HIGH){
 12a:	8b 81       	ldd	r24, Y+3	; 0x03
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	09 f5       	brne	.+66     	; 0x172 <ChooseMode+0xe0>
			LED_ON(LED_RED_CARS);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			LED_ON(LED_GREEN_PEDS);
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			Timer0_delay_ms(5000);
 13c:	68 e8       	ldi	r22, 0x88	; 136
 13e:	73 e1       	ldi	r23, 0x13	; 19
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
			// Completing the states
			for (uint8_t i = 0;i<5;i++)
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	08 c0       	rjmp	.+16     	; 0x15c <ChooseMode+0xca>
			{
				LED_OFF(LED_RED_CARS);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
				BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
 152:	69 e0       	ldi	r22, 0x09	; 9
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 ef 03 	call	0x7de	; 0x7de <BothYellowBlink>
		if(ledredval == HIGH){
			LED_ON(LED_RED_CARS);
			LED_ON(LED_GREEN_PEDS);
			Timer0_delay_ms(5000);
			// Completing the states
			for (uint8_t i = 0;i<5;i++)
 15a:	1f 5f       	subi	r17, 0xFF	; 255
 15c:	15 30       	cpi	r17, 0x05	; 5
 15e:	b0 f3       	brcs	.-20     	; 0x14c <ChooseMode+0xba>
			{
				LED_OFF(LED_RED_CARS);
				BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
			}
			LED_OFF(LED_GREEN_PEDS);
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			LED_ON(LED_RED_PEDS);
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			LED_ON(LED_GREEN_CARS);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		}
		if((ledyellowval == HIGH)||(ledgreenval == HIGH)){
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	21 f0       	breq	.+8      	; 0x180 <ChooseMode+0xee>
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	09 f0       	breq	.+2      	; 0x180 <ChooseMode+0xee>
 17e:	42 c0       	rjmp	.+132    	; 0x204 <ChooseMode+0x172>
			LED_ON(LED_RED_PEDS);
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			Timer0_delay_ms(1000);
 186:	68 ee       	ldi	r22, 0xE8	; 232
 188:	73 e0       	ldi	r23, 0x03	; 3
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
			for (uint8_t i = 0;i<5;i++)
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	0b c0       	rjmp	.+22     	; 0x1ac <ChooseMode+0x11a>
			{
				LED_ON(LED_RED_PEDS);
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
				LED_OFF(LED_GREEN_CARS);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
				BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
 1a2:	69 e0       	ldi	r22, 0x09	; 9
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 ef 03 	call	0x7de	; 0x7de <BothYellowBlink>
			LED_ON(LED_GREEN_CARS);
		}
		if((ledyellowval == HIGH)||(ledgreenval == HIGH)){
			LED_ON(LED_RED_PEDS);
			Timer0_delay_ms(1000);
			for (uint8_t i = 0;i<5;i++)
 1aa:	1f 5f       	subi	r17, 0xFF	; 255
 1ac:	15 30       	cpi	r17, 0x05	; 5
 1ae:	98 f3       	brcs	.-26     	; 0x196 <ChooseMode+0x104>
			{
				LED_ON(LED_RED_PEDS);
				LED_OFF(LED_GREEN_CARS);
				BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
			}
			LED_OFF(LED_YELLOW_CARS);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			LED_OFF(LED_YELLOW_PEDS);
 1b6:	89 e0       	ldi	r24, 0x09	; 9
 1b8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			LED_OFF(LED_RED_PEDS);
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			LED_ON(LED_RED_CARS);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			LED_ON(LED_GREEN_PEDS);
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			Timer0_delay_ms(5000);
 1ce:	68 e8       	ldi	r22, 0x88	; 136
 1d0:	73 e1       	ldi	r23, 0x13	; 19
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
			// Completing the states
			for (uint8_t i = 0;i<5;i++)
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <ChooseMode+0x15c>
			{
				LED_OFF(LED_RED_CARS);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
				BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
 1e4:	69 e0       	ldi	r22, 0x09	; 9
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 ef 03 	call	0x7de	; 0x7de <BothYellowBlink>
			LED_OFF(LED_RED_PEDS);
			LED_ON(LED_RED_CARS);
			LED_ON(LED_GREEN_PEDS);
			Timer0_delay_ms(5000);
			// Completing the states
			for (uint8_t i = 0;i<5;i++)
 1ec:	1f 5f       	subi	r17, 0xFF	; 255
 1ee:	15 30       	cpi	r17, 0x05	; 5
 1f0:	b0 f3       	brcs	.-20     	; 0x1de <ChooseMode+0x14c>
			{
				LED_OFF(LED_RED_CARS);
				BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
			}
			LED_OFF(LED_GREEN_PEDS);
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			LED_ON(LED_RED_PEDS);
 1f8:	8a e0       	ldi	r24, 0x0A	; 10
 1fa:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			LED_ON(LED_GREEN_CARS);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		}
	}
}
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	08 95       	ret

00000212 <Button_State>:

/************************************************************************/
/* This function to switch between the two modes when the switch is pressed*/
/************************************************************************/

void Button_State(void){
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	1f 92       	push	r1
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	uint8_t ButtonState = 0;
 21c:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_read(SWITCH,&ButtonState);
 21e:	be 01       	movw	r22, r28
 220:	6f 5f       	subi	r22, 0xFF	; 255
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	8a e1       	ldi	r24, 0x1A	; 26
 226:	0e 94 c9 03 	call	0x792	; 0x792 <BUTTON_read>
	if(ButtonState == HIGH){
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	19 f4       	brne	.+6      	; 0x236 <Button_State+0x24>
		ChooseMode(PEDESTRIAN_MODE);
 230:	0e 94 49 00 	call	0x92	; 0x92 <ChooseMode>
 234:	04 c0       	rjmp	.+8      	; 0x23e <Button_State+0x2c>
		}else if(ButtonState == LOW){
 236:	81 11       	cpse	r24, r1
 238:	02 c0       	rjmp	.+4      	; 0x23e <Button_State+0x2c>
		ChooseMode(NORMAL_MODE);
 23a:	0e 94 49 00 	call	0x92	; 0x92 <ChooseMode>
	}
}
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <APP_init>:
/************************************************************************/
/* HERE is all the intialization that we're going to use and Setting call back function (interrupt)*/
/************************************************************************/

void APP_init(void){
	LED_init();
 246:	0e 94 cc 03 	call	0x798	; 0x798 <LED_init>

	timer_init();
 24a:	0e 94 a9 04 	call	0x952	; 0x952 <timer_init>
	
	SREG |= (1<<7); //Enable global interrupt
 24e:	8f b7       	in	r24, 0x3f	; 63
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8f bf       	out	0x3f, r24	; 63
	//EXT_init_Interrupt0();
	EXTI_init();
 254:	0e 94 1f 04 	call	0x83e	; 0x83e <EXTI_init>
	SetCallback_INT0(Button_State);
 258:	89 e0       	ldi	r24, 0x09	; 9
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 29 04 	call	0x852	; 0x852 <SetCallback_INT0>
 260:	08 95       	ret

00000262 <APP_start>:

/************************************************************************/
/* Here is where all the process happens and switching between different states based on the previuos state and the input which is the switch   */
/************************************************************************/

void APP_start(void){
 262:	cf 93       	push	r28
	BUTTON_read(SWITCH,&ButtonState);
 264:	6f e7       	ldi	r22, 0x7F	; 127
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	8a e1       	ldi	r24, 0x1A	; 26
 26a:	0e 94 c9 03 	call	0x792	; 0x792 <BUTTON_read>
	STATE_LED(LED_RED_CARS,&ledredval);
 26e:	6e e7       	ldi	r22, 0x7E	; 126
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 d7 03 	call	0x7ae	; 0x7ae <STATE_LED>
	STATE_LED(LED_GREEN_CARS,&ledgreenval);
 278:	6c e7       	ldi	r22, 0x7C	; 124
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <STATE_LED>
	STATE_LED(LED_YELLOW_CARS,&ledyellowval);
 282:	6d e7       	ldi	r22, 0x7D	; 125
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 d7 03 	call	0x7ae	; 0x7ae <STATE_LED>
	if((ButtonState == HIGH)&&(ledredval == HIGH)){
 28c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ButtonState>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	31 f5       	brne	.+76     	; 0x2e0 <APP_start+0x7e>
 294:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <ledredval>
 298:	91 30       	cpi	r25, 0x01	; 1
 29a:	11 f5       	brne	.+68     	; 0x2e0 <APP_start+0x7e>
		LED_ON(LED_RED_CARS);
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		LED_ON(LED_GREEN_PEDS);
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		Timer0_delay_ms(5000);
 2a8:	68 e8       	ldi	r22, 0x88	; 136
 2aa:	73 e1       	ldi	r23, 0x13	; 19
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
		// Completing the states
		for (uint8_t i = 0;i<5;i++)
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	08 c0       	rjmp	.+16     	; 0x2c8 <APP_start+0x66>
		{
			LED_OFF(LED_RED_CARS);
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
 2be:	69 e0       	ldi	r22, 0x09	; 9
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 ef 03 	call	0x7de	; 0x7de <BothYellowBlink>
	if((ButtonState == HIGH)&&(ledredval == HIGH)){
		LED_ON(LED_RED_CARS);
		LED_ON(LED_GREEN_PEDS);
		Timer0_delay_ms(5000);
		// Completing the states
		for (uint8_t i = 0;i<5;i++)
 2c6:	cf 5f       	subi	r28, 0xFF	; 255
 2c8:	c5 30       	cpi	r28, 0x05	; 5
 2ca:	b0 f3       	brcs	.-20     	; 0x2b8 <APP_start+0x56>
		{
			LED_OFF(LED_RED_CARS);
			BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
		}
		LED_OFF(LED_GREEN_PEDS);
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
		LED_ON(LED_RED_PEDS);
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		LED_ON(LED_GREEN_CARS);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
 2de:	5a c0       	rjmp	.+180    	; 0x394 <APP_start+0x132>
	}
	else if((ButtonState == HIGH)&&((ledyellowval == HIGH)||(ledgreenval == HIGH))){
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <APP_start+0x84>
 2e4:	53 c0       	rjmp	.+166    	; 0x38c <APP_start+0x12a>
 2e6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <ledyellowval>
 2ea:	91 30       	cpi	r25, 0x01	; 1
 2ec:	29 f0       	breq	.+10     	; 0x2f8 <APP_start+0x96>
 2ee:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__data_end>
 2f2:	91 30       	cpi	r25, 0x01	; 1
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <APP_start+0x96>
 2f6:	4a c0       	rjmp	.+148    	; 0x38c <APP_start+0x12a>
		Timer0_delay_ms(1000);
 2f8:	68 ee       	ldi	r22, 0xE8	; 232
 2fa:	73 e0       	ldi	r23, 0x03	; 3
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
		if(ButtonState == LOW){
 304:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ButtonState>
 308:	81 11       	cpse	r24, r1
 30a:	44 c0       	rjmp	.+136    	; 0x394 <APP_start+0x132>
			LED_ON(LED_RED_PEDS);
 30c:	8a e0       	ldi	r24, 0x0A	; 10
 30e:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		Timer0_delay_ms(1000);
 312:	68 ee       	ldi	r22, 0xE8	; 232
 314:	73 e0       	ldi	r23, 0x03	; 3
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
		for (uint8_t i = 0;i<5;i++)
 31e:	c0 e0       	ldi	r28, 0x00	; 0
 320:	08 c0       	rjmp	.+16     	; 0x332 <APP_start+0xd0>
		{
			LED_ON(LED_RED_PEDS);
 322:	8a e0       	ldi	r24, 0x0A	; 10
 324:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
			BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
 328:	69 e0       	ldi	r22, 0x09	; 9
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 ef 03 	call	0x7de	; 0x7de <BothYellowBlink>
	else if((ButtonState == HIGH)&&((ledyellowval == HIGH)||(ledgreenval == HIGH))){
		Timer0_delay_ms(1000);
		if(ButtonState == LOW){
			LED_ON(LED_RED_PEDS);
		Timer0_delay_ms(1000);
		for (uint8_t i = 0;i<5;i++)
 330:	cf 5f       	subi	r28, 0xFF	; 255
 332:	c5 30       	cpi	r28, 0x05	; 5
 334:	b0 f3       	brcs	.-20     	; 0x322 <APP_start+0xc0>
		{
			LED_ON(LED_RED_PEDS);
			BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
		}
		LED_OFF(LED_YELLOW_CARS);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
		LED_OFF(LED_YELLOW_PEDS);
 33c:	89 e0       	ldi	r24, 0x09	; 9
 33e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
		LED_OFF(LED_RED_PEDS);
 342:	8a e0       	ldi	r24, 0x0A	; 10
 344:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
		LED_ON(LED_RED_CARS);
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		LED_ON(LED_GREEN_PEDS);
 34e:	88 e0       	ldi	r24, 0x08	; 8
 350:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		Timer0_delay_ms(5000);
 354:	68 e8       	ldi	r22, 0x88	; 136
 356:	73 e1       	ldi	r23, 0x13	; 19
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
		// Completing the states
		for (uint8_t i = 0;i<5;i++)
 360:	c0 e0       	ldi	r28, 0x00	; 0
 362:	08 c0       	rjmp	.+16     	; 0x374 <APP_start+0x112>
		{
			LED_OFF(LED_RED_CARS);
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
			BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
 36a:	69 e0       	ldi	r22, 0x09	; 9
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 ef 03 	call	0x7de	; 0x7de <BothYellowBlink>
		LED_OFF(LED_RED_PEDS);
		LED_ON(LED_RED_CARS);
		LED_ON(LED_GREEN_PEDS);
		Timer0_delay_ms(5000);
		// Completing the states
		for (uint8_t i = 0;i<5;i++)
 372:	cf 5f       	subi	r28, 0xFF	; 255
 374:	c5 30       	cpi	r28, 0x05	; 5
 376:	b0 f3       	brcs	.-20     	; 0x364 <APP_start+0x102>
		{
			LED_OFF(LED_RED_CARS);
			BothYellowBlink(LED_YELLOW_CARS,LED_YELLOW_PEDS);
		}
		LED_OFF(LED_GREEN_PEDS);
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
		LED_ON(LED_RED_PEDS);
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
		LED_ON(LED_GREEN_CARS);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
 38a:	04 c0       	rjmp	.+8      	; 0x394 <APP_start+0x132>
		}
		
	}
	else if(ButtonState == LOW){
 38c:	81 11       	cpse	r24, r1
 38e:	02 c0       	rjmp	.+4      	; 0x394 <APP_start+0x132>
		ChooseMode(NORMAL_MODE);
 390:	0e 94 49 00 	call	0x92	; 0x92 <ChooseMode>
	}
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <main>:

#include "Application/app.h"

int main(void){
	//Intialization
	APP_init();
 398:	0e 94 23 01 	call	0x246	; 0x246 <APP_init>
	
	
	while(1){
		// Starting the application
		APP_start();	
 39c:	0e 94 31 01 	call	0x262	; 0x262 <APP_start>
 3a0:	fd cf       	rjmp	.-6      	; 0x39c <main+0x4>

000003a2 <Dio_write>:
		}else if(port == PORT_B){
		PORTB = level;
		}else if(port == PORT_C){
		PORTC = level;
		}else if(port == PORT_D){
		PORTD = level;
 3a2:	98 2f       	mov	r25, r24
 3a4:	96 95       	lsr	r25
 3a6:	96 95       	lsr	r25
 3a8:	96 95       	lsr	r25
 3aa:	87 70       	andi	r24, 0x07	; 7
 3ac:	91 11       	cpse	r25, r1
 3ae:	1d c0       	rjmp	.+58     	; 0x3ea <Dio_write+0x48>
 3b0:	61 30       	cpi	r22, 0x01	; 1
 3b2:	69 f4       	brne	.+26     	; 0x3ce <Dio_write+0x2c>
 3b4:	4b b3       	in	r20, 0x1b	; 27
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Dio_write+0x20>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Dio_write+0x1c>
 3c6:	cb 01       	movw	r24, r22
 3c8:	84 2b       	or	r24, r20
 3ca:	8b bb       	out	0x1b, r24	; 27
 3cc:	08 95       	ret
 3ce:	4b b3       	in	r20, 0x1b	; 27
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	b9 01       	movw	r22, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <Dio_write+0x3a>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <Dio_write+0x36>
 3e0:	cb 01       	movw	r24, r22
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	8b bb       	out	0x1b, r24	; 27
 3e8:	08 95       	ret
 3ea:	91 30       	cpi	r25, 0x01	; 1
 3ec:	e9 f4       	brne	.+58     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3ee:	61 30       	cpi	r22, 0x01	; 1
 3f0:	69 f4       	brne	.+26     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3f2:	48 b3       	in	r20, 0x18	; 24
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <Dio_write+0x5a>
 404:	cb 01       	movw	r24, r22
 406:	84 2b       	or	r24, r20
 408:	88 bb       	out	0x18, r24	; 24
 40a:	08 95       	ret
 40c:	48 b3       	in	r20, 0x18	; 24
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	b9 01       	movw	r22, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	8a 95       	dec	r24
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	cb 01       	movw	r24, r22
 420:	80 95       	com	r24
 422:	84 23       	and	r24, r20
 424:	88 bb       	out	0x18, r24	; 24
 426:	08 95       	ret
 428:	92 30       	cpi	r25, 0x02	; 2
 42a:	e9 f4       	brne	.+58     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 42c:	61 30       	cpi	r22, 0x01	; 1
 42e:	69 f4       	brne	.+26     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 430:	45 b3       	in	r20, 0x15	; 21
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	b9 01       	movw	r22, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	8a 95       	dec	r24
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	cb 01       	movw	r24, r22
 444:	84 2b       	or	r24, r20
 446:	85 bb       	out	0x15, r24	; 21
 448:	08 95       	ret
 44a:	45 b3       	in	r20, 0x15	; 21
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	b9 01       	movw	r22, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	8a 95       	dec	r24
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 45c:	cb 01       	movw	r24, r22
 45e:	80 95       	com	r24
 460:	84 23       	and	r24, r20
 462:	85 bb       	out	0x15, r24	; 21
 464:	08 95       	ret
 466:	93 30       	cpi	r25, 0x03	; 3
 468:	e1 f4       	brne	.+56     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 46a:	61 30       	cpi	r22, 0x01	; 1
 46c:	69 f4       	brne	.+26     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 46e:	42 b3       	in	r20, 0x12	; 18
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	cb 01       	movw	r24, r22
 482:	84 2b       	or	r24, r20
 484:	82 bb       	out	0x12, r24	; 18
 486:	08 95       	ret
 488:	42 b3       	in	r20, 0x12	; 18
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	b9 01       	movw	r22, r18
 490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	8a 95       	dec	r24
 498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	cb 01       	movw	r24, r22
 49c:	80 95       	com	r24
 49e:	84 23       	and	r24, r20
 4a0:	82 bb       	out	0x12, r24	; 18
 4a2:	08 95       	ret

000004a4 <Dio_read>:
 4a4:	98 2f       	mov	r25, r24
 4a6:	96 95       	lsr	r25
 4a8:	96 95       	lsr	r25
 4aa:	96 95       	lsr	r25
 4ac:	87 70       	andi	r24, 0x07	; 7
 4ae:	91 11       	cpse	r25, r1
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <Dio_read+0x28>
 4b2:	29 b3       	in	r18, 0x19	; 25
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	a9 01       	movw	r20, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <Dio_read+0x1a>
 4ba:	55 95       	asr	r21
 4bc:	47 95       	ror	r20
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <Dio_read+0x16>
 4c2:	ca 01       	movw	r24, r20
 4c4:	81 70       	andi	r24, 0x01	; 1
 4c6:	fb 01       	movw	r30, r22
 4c8:	80 83       	st	Z, r24
 4ca:	08 95       	ret
 4cc:	91 30       	cpi	r25, 0x01	; 1
 4ce:	69 f4       	brne	.+26     	; 0x4ea <Dio_read+0x46>
 4d0:	26 b3       	in	r18, 0x16	; 22
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	a9 01       	movw	r20, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <Dio_read+0x38>
 4d8:	55 95       	asr	r21
 4da:	47 95       	ror	r20
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <Dio_read+0x34>
 4e0:	ca 01       	movw	r24, r20
 4e2:	81 70       	andi	r24, 0x01	; 1
 4e4:	fb 01       	movw	r30, r22
 4e6:	80 83       	st	Z, r24
 4e8:	08 95       	ret
 4ea:	92 30       	cpi	r25, 0x02	; 2
 4ec:	69 f4       	brne	.+26     	; 0x508 <Dio_read+0x64>
 4ee:	23 b3       	in	r18, 0x13	; 19
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	a9 01       	movw	r20, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <Dio_read+0x56>
 4f6:	55 95       	asr	r21
 4f8:	47 95       	ror	r20
 4fa:	8a 95       	dec	r24
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <Dio_read+0x52>
 4fe:	ca 01       	movw	r24, r20
 500:	81 70       	andi	r24, 0x01	; 1
 502:	fb 01       	movw	r30, r22
 504:	80 83       	st	Z, r24
 506:	08 95       	ret
 508:	93 30       	cpi	r25, 0x03	; 3
 50a:	61 f4       	brne	.+24     	; 0x524 <Dio_read+0x80>
 50c:	20 b3       	in	r18, 0x10	; 16
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	a9 01       	movw	r20, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <Dio_read+0x74>
 514:	55 95       	asr	r21
 516:	47 95       	ror	r20
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <Dio_read+0x70>
 51c:	ca 01       	movw	r24, r20
 51e:	81 70       	andi	r24, 0x01	; 1
 520:	fb 01       	movw	r30, r22
 522:	80 83       	st	Z, r24
 524:	08 95       	ret

00000526 <Dio_init>:
/************************************************************************/


void Dio_init(void){
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	2e c1       	rjmp	.+604    	; 0x788 <Dio_init+0x262>
		if(Dio_Cfg_Pins[i].PinPort == PORT_A){
 52c:	fc 01       	movw	r30, r24
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	e0 5a       	subi	r30, 0xA0	; 160
 538:	ff 4f       	sbci	r31, 0xFF	; 255
 53a:	20 81       	ld	r18, Z
 53c:	21 11       	cpse	r18, r1
 53e:	47 c0       	rjmp	.+142    	; 0x5ce <Dio_init+0xa8>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
 540:	fc 01       	movw	r30, r24
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	e0 5a       	subi	r30, 0xA0	; 160
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	22 81       	ldd	r18, Z+2	; 0x02
 550:	21 30       	cpi	r18, 0x01	; 1
 552:	99 f4       	brne	.+38     	; 0x57a <Dio_init+0x54>
				SET_BIT(DDRA,Dio_Cfg_Pins[i].Pin);
 554:	4a b3       	in	r20, 0x1a	; 26
 556:	fc 01       	movw	r30, r24
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	e0 5a       	subi	r30, 0xA0	; 160
 562:	ff 4f       	sbci	r31, 0xFF	; 255
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	01 80       	ldd	r0, Z+1	; 0x01
 56a:	02 c0       	rjmp	.+4      	; 0x570 <Dio_init+0x4a>
 56c:	22 0f       	add	r18, r18
 56e:	33 1f       	adc	r19, r19
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <Dio_init+0x46>
 574:	24 2b       	or	r18, r20
 576:	2a bb       	out	0x1a, r18	; 26
 578:	06 c1       	rjmp	.+524    	; 0x786 <Dio_init+0x260>
				}else{
				CLR_BIT(DDRA,Dio_Cfg_Pins[i].Pin);
 57a:	4a b3       	in	r20, 0x1a	; 26
 57c:	fc 01       	movw	r30, r24
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	e0 5a       	subi	r30, 0xA0	; 160
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	01 80       	ldd	r0, Z+1	; 0x01
 590:	02 c0       	rjmp	.+4      	; 0x596 <Dio_init+0x70>
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <Dio_init+0x6c>
 59a:	20 95       	com	r18
 59c:	24 23       	and	r18, r20
 59e:	2a bb       	out	0x1a, r18	; 26
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
 5a0:	23 81       	ldd	r18, Z+3	; 0x03
 5a2:	21 30       	cpi	r18, 0x01	; 1
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <Dio_init+0x82>
 5a6:	ef c0       	rjmp	.+478    	; 0x786 <Dio_init+0x260>
					SET_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
 5a8:	4b b3       	in	r20, 0x1b	; 27
 5aa:	fc 01       	movw	r30, r24
 5ac:	ee 0f       	add	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	e0 5a       	subi	r30, 0xA0	; 160
 5b6:	ff 4f       	sbci	r31, 0xFF	; 255
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	01 80       	ldd	r0, Z+1	; 0x01
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <Dio_init+0x9e>
 5c0:	22 0f       	add	r18, r18
 5c2:	33 1f       	adc	r19, r19
 5c4:	0a 94       	dec	r0
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <Dio_init+0x9a>
 5c8:	24 2b       	or	r18, r20
 5ca:	2b bb       	out	0x1b, r18	; 27
 5cc:	dc c0       	rjmp	.+440    	; 0x786 <Dio_init+0x260>
				}
			}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_B){
 5ce:	21 30       	cpi	r18, 0x01	; 1
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <Dio_init+0xae>
 5d2:	47 c0       	rjmp	.+142    	; 0x662 <Dio_init+0x13c>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
 5d4:	fc 01       	movw	r30, r24
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	e0 5a       	subi	r30, 0xA0	; 160
 5e0:	ff 4f       	sbci	r31, 0xFF	; 255
 5e2:	22 81       	ldd	r18, Z+2	; 0x02
 5e4:	21 30       	cpi	r18, 0x01	; 1
 5e6:	99 f4       	brne	.+38     	; 0x60e <Dio_init+0xe8>
				SET_BIT(DDRB,Dio_Cfg_Pins[i].Pin);
 5e8:	47 b3       	in	r20, 0x17	; 23
 5ea:	fc 01       	movw	r30, r24
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	e0 5a       	subi	r30, 0xA0	; 160
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	01 80       	ldd	r0, Z+1	; 0x01
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <Dio_init+0xde>
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <Dio_init+0xda>
 608:	24 2b       	or	r18, r20
 60a:	27 bb       	out	0x17, r18	; 23
 60c:	bc c0       	rjmp	.+376    	; 0x786 <Dio_init+0x260>
				}else{
				CLR_BIT(DDRB,Dio_Cfg_Pins[i].Pin);
 60e:	47 b3       	in	r20, 0x17	; 23
 610:	fc 01       	movw	r30, r24
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	e0 5a       	subi	r30, 0xA0	; 160
 61c:	ff 4f       	sbci	r31, 0xFF	; 255
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	01 80       	ldd	r0, Z+1	; 0x01
 624:	02 c0       	rjmp	.+4      	; 0x62a <Dio_init+0x104>
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	0a 94       	dec	r0
 62c:	e2 f7       	brpl	.-8      	; 0x626 <Dio_init+0x100>
 62e:	20 95       	com	r18
 630:	24 23       	and	r18, r20
 632:	27 bb       	out	0x17, r18	; 23
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
 634:	23 81       	ldd	r18, Z+3	; 0x03
 636:	21 30       	cpi	r18, 0x01	; 1
 638:	09 f0       	breq	.+2      	; 0x63c <Dio_init+0x116>
 63a:	a5 c0       	rjmp	.+330    	; 0x786 <Dio_init+0x260>
					SET_BIT(PORTB,Dio_Cfg_Pins[i].Pin);
 63c:	48 b3       	in	r20, 0x18	; 24
 63e:	fc 01       	movw	r30, r24
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	e0 5a       	subi	r30, 0xA0	; 160
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	01 80       	ldd	r0, Z+1	; 0x01
 652:	02 c0       	rjmp	.+4      	; 0x658 <Dio_init+0x132>
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <Dio_init+0x12e>
 65c:	24 2b       	or	r18, r20
 65e:	28 bb       	out	0x18, r18	; 24
 660:	92 c0       	rjmp	.+292    	; 0x786 <Dio_init+0x260>
				}
			}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_C){
 662:	22 30       	cpi	r18, 0x02	; 2
 664:	09 f0       	breq	.+2      	; 0x668 <Dio_init+0x142>
 666:	47 c0       	rjmp	.+142    	; 0x6f6 <Dio_init+0x1d0>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
 668:	fc 01       	movw	r30, r24
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	ee 0f       	add	r30, r30
 670:	ff 1f       	adc	r31, r31
 672:	e0 5a       	subi	r30, 0xA0	; 160
 674:	ff 4f       	sbci	r31, 0xFF	; 255
 676:	22 81       	ldd	r18, Z+2	; 0x02
 678:	21 30       	cpi	r18, 0x01	; 1
 67a:	99 f4       	brne	.+38     	; 0x6a2 <Dio_init+0x17c>
				SET_BIT(DDRC,Dio_Cfg_Pins[i].Pin);
 67c:	44 b3       	in	r20, 0x14	; 20
 67e:	fc 01       	movw	r30, r24
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	e0 5a       	subi	r30, 0xA0	; 160
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	21 e0       	ldi	r18, 0x01	; 1
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	01 80       	ldd	r0, Z+1	; 0x01
 692:	02 c0       	rjmp	.+4      	; 0x698 <Dio_init+0x172>
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <Dio_init+0x16e>
 69c:	24 2b       	or	r18, r20
 69e:	24 bb       	out	0x14, r18	; 20
 6a0:	72 c0       	rjmp	.+228    	; 0x786 <Dio_init+0x260>
				}else{
				CLR_BIT(DDRC,Dio_Cfg_Pins[i].Pin);
 6a2:	44 b3       	in	r20, 0x14	; 20
 6a4:	fc 01       	movw	r30, r24
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	e0 5a       	subi	r30, 0xA0	; 160
 6b0:	ff 4f       	sbci	r31, 0xFF	; 255
 6b2:	21 e0       	ldi	r18, 0x01	; 1
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	01 80       	ldd	r0, Z+1	; 0x01
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <Dio_init+0x198>
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	0a 94       	dec	r0
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <Dio_init+0x194>
 6c2:	20 95       	com	r18
 6c4:	24 23       	and	r18, r20
 6c6:	24 bb       	out	0x14, r18	; 20
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
 6c8:	23 81       	ldd	r18, Z+3	; 0x03
 6ca:	21 30       	cpi	r18, 0x01	; 1
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <Dio_init+0x1aa>
 6ce:	5b c0       	rjmp	.+182    	; 0x786 <Dio_init+0x260>
					SET_BIT(PORTC,Dio_Cfg_Pins[i].Pin);
 6d0:	45 b3       	in	r20, 0x15	; 21
 6d2:	fc 01       	movw	r30, r24
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	e0 5a       	subi	r30, 0xA0	; 160
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	01 80       	ldd	r0, Z+1	; 0x01
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <Dio_init+0x1c6>
 6e8:	22 0f       	add	r18, r18
 6ea:	33 1f       	adc	r19, r19
 6ec:	0a 94       	dec	r0
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <Dio_init+0x1c2>
 6f0:	24 2b       	or	r18, r20
 6f2:	25 bb       	out	0x15, r18	; 21
 6f4:	48 c0       	rjmp	.+144    	; 0x786 <Dio_init+0x260>
				}
			}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_D){
 6f6:	23 30       	cpi	r18, 0x03	; 3
 6f8:	09 f0       	breq	.+2      	; 0x6fc <Dio_init+0x1d6>
 6fa:	45 c0       	rjmp	.+138    	; 0x786 <Dio_init+0x260>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
 6fc:	fc 01       	movw	r30, r24
 6fe:	ee 0f       	add	r30, r30
 700:	ff 1f       	adc	r31, r31
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	e0 5a       	subi	r30, 0xA0	; 160
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	22 81       	ldd	r18, Z+2	; 0x02
 70c:	21 30       	cpi	r18, 0x01	; 1
 70e:	99 f4       	brne	.+38     	; 0x736 <Dio_init+0x210>
				SET_BIT(DDRD,Dio_Cfg_Pins[i].Pin);
 710:	41 b3       	in	r20, 0x11	; 17
 712:	fc 01       	movw	r30, r24
 714:	ee 0f       	add	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	e0 5a       	subi	r30, 0xA0	; 160
 71e:	ff 4f       	sbci	r31, 0xFF	; 255
 720:	21 e0       	ldi	r18, 0x01	; 1
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	01 80       	ldd	r0, Z+1	; 0x01
 726:	02 c0       	rjmp	.+4      	; 0x72c <Dio_init+0x206>
 728:	22 0f       	add	r18, r18
 72a:	33 1f       	adc	r19, r19
 72c:	0a 94       	dec	r0
 72e:	e2 f7       	brpl	.-8      	; 0x728 <Dio_init+0x202>
 730:	24 2b       	or	r18, r20
 732:	21 bb       	out	0x11, r18	; 17
 734:	28 c0       	rjmp	.+80     	; 0x786 <Dio_init+0x260>
				}else{
				CLR_BIT(DDRD,Dio_Cfg_Pins[i].Pin);
 736:	41 b3       	in	r20, 0x11	; 17
 738:	fc 01       	movw	r30, r24
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	e0 5a       	subi	r30, 0xA0	; 160
 744:	ff 4f       	sbci	r31, 0xFF	; 255
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	01 80       	ldd	r0, Z+1	; 0x01
 74c:	02 c0       	rjmp	.+4      	; 0x752 <Dio_init+0x22c>
 74e:	22 0f       	add	r18, r18
 750:	33 1f       	adc	r19, r19
 752:	0a 94       	dec	r0
 754:	e2 f7       	brpl	.-8      	; 0x74e <Dio_init+0x228>
 756:	20 95       	com	r18
 758:	24 23       	and	r18, r20
 75a:	21 bb       	out	0x11, r18	; 17
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
 75c:	23 81       	ldd	r18, Z+3	; 0x03
 75e:	21 30       	cpi	r18, 0x01	; 1
 760:	91 f4       	brne	.+36     	; 0x786 <Dio_init+0x260>
					SET_BIT(PORTD,Dio_Cfg_Pins[i].Pin);
 762:	42 b3       	in	r20, 0x12	; 18
 764:	fc 01       	movw	r30, r24
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	ee 0f       	add	r30, r30
 76c:	ff 1f       	adc	r31, r31
 76e:	e0 5a       	subi	r30, 0xA0	; 160
 770:	ff 4f       	sbci	r31, 0xFF	; 255
 772:	21 e0       	ldi	r18, 0x01	; 1
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	01 80       	ldd	r0, Z+1	; 0x01
 778:	02 c0       	rjmp	.+4      	; 0x77e <Dio_init+0x258>
 77a:	22 0f       	add	r18, r18
 77c:	33 1f       	adc	r19, r19
 77e:	0a 94       	dec	r0
 780:	e2 f7       	brpl	.-8      	; 0x77a <Dio_init+0x254>
 782:	24 2b       	or	r18, r20
 784:	22 bb       	out	0x12, r18	; 18
/************************************************************************/


void Dio_init(void){
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	87 30       	cpi	r24, 0x07	; 7
 78a:	91 05       	cpc	r25, r1
 78c:	0c f4       	brge	.+2      	; 0x790 <Dio_init+0x26a>
 78e:	ce ce       	rjmp	.-612    	; 0x52c <Dio_init+0x6>
					SET_BIT(PORTD,Dio_Cfg_Pins[i].Pin);
				}
			}
		}
	}
}
 790:	08 95       	ret

00000792 <BUTTON_read>:
/************************************************************************/
/* Get Button status                                                                    */
/************************************************************************/

void BUTTON_read(channel_type channel,uint8_t *val){
	Dio_read(channel, val);
 792:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Dio_read>
 796:	08 95       	ret

00000798 <LED_init>:

/************************************************************************/
/* Toggle the led                                                                     */
/************************************************************************/
void LED_TOGGLE(channel_type channel){
	Dio_FlipChannel(channel);
 798:	0e 94 93 02 	call	0x526	; 0x526 <Dio_init>
 79c:	08 95       	ret

0000079e <LED_ON>:
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Dio_write>
 7a4:	08 95       	ret

000007a6 <LED_OFF>:
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Dio_write>
 7ac:	08 95       	ret

000007ae <STATE_LED>:

/************************************************************************/
/* Get the status of the LED (ON/OFF)                                                                    */
/************************************************************************/
void STATE_LED(channel_type channel,uint8_t *val){
	Dio_read(channel, val);
 7ae:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Dio_read>
 7b2:	08 95       	ret

000007b4 <YellowBlink>:
}

/************************************************************************/
/* To make only a specific LED blinking                                                                     */
/************************************************************************/
void YellowBlink(channel_type channel1){
 7b4:	cf 93       	push	r28
 7b6:	c8 2f       	mov	r28, r24
	LED_ON(channel1);
 7b8:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
	Timer0_delay_ms(500);
 7bc:	64 ef       	ldi	r22, 0xF4	; 244
 7be:	71 e0       	ldi	r23, 0x01	; 1
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
	LED_OFF(channel1);
 7c8:	8c 2f       	mov	r24, r28
 7ca:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
	Timer0_delay_ms(500);
 7ce:	64 ef       	ldi	r22, 0xF4	; 244
 7d0:	71 e0       	ldi	r23, 0x01	; 1
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
}
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <BothYellowBlink>:
/************************************************************************/
/* To  make both Yellow Leds blinking                                                                     */
/************************************************************************/
void BothYellowBlink(channel_type channel1,channel_type channel2){
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	d8 2f       	mov	r29, r24
 7e4:	c6 2f       	mov	r28, r22
	LED_ON(channel1);
 7e6:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
	LED_ON(channel2);
 7ea:	8c 2f       	mov	r24, r28
 7ec:	0e 94 cf 03 	call	0x79e	; 0x79e <LED_ON>
	Timer0_delay_ms(500);
 7f0:	64 ef       	ldi	r22, 0xF4	; 244
 7f2:	71 e0       	ldi	r23, 0x01	; 1
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
	LED_OFF(channel1);
 7fc:	8d 2f       	mov	r24, r29
 7fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
	LED_OFF(channel2);
 802:	8c 2f       	mov	r24, r28
 804:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_OFF>
	Timer0_delay_ms(500);
 808:	64 ef       	ldi	r22, 0xF4	; 244
 80a:	71 e0       	ldi	r23, 0x01	; 1
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 ba 04 	call	0x974	; 0x974 <Timer0_delay_ms>
}
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	08 95       	ret

0000081a <EXTI_enable>:
}
void SetCallback_INT1(void (*p2f)(void)){
	p2f_INT1 = p2f;
}
void SetCallback_INT2(void (*p2f)(void)){
	p2f_INT2 = p2f;
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	41 f0       	breq	.+16     	; 0x82e <EXTI_enable+0x14>
 81e:	18 f0       	brcs	.+6      	; 0x826 <EXTI_enable+0xc>
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	49 f0       	breq	.+18     	; 0x836 <EXTI_enable+0x1c>
 824:	08 95       	ret
 826:	8b b7       	in	r24, 0x3b	; 59
 828:	80 64       	ori	r24, 0x40	; 64
 82a:	8b bf       	out	0x3b, r24	; 59
 82c:	08 95       	ret
 82e:	8b b7       	in	r24, 0x3b	; 59
 830:	80 68       	ori	r24, 0x80	; 128
 832:	8b bf       	out	0x3b, r24	; 59
 834:	08 95       	ret
 836:	8b b7       	in	r24, 0x3b	; 59
 838:	80 62       	ori	r24, 0x20	; 32
 83a:	8b bf       	out	0x3b, r24	; 59
 83c:	08 95       	ret

0000083e <EXTI_init>:
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	0e 94 0d 04 	call	0x81a	; 0x81a <EXTI_enable>
 844:	85 b7       	in	r24, 0x35	; 53
 846:	81 60       	ori	r24, 0x01	; 1
 848:	85 bf       	out	0x35, r24	; 53
 84a:	85 b7       	in	r24, 0x35	; 53
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	85 bf       	out	0x35, r24	; 53
 850:	08 95       	ret

00000852 <SetCallback_INT0>:
 852:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <p2f_INT0+0x1>
 856:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <p2f_INT0>
 85a:	08 95       	ret

0000085c <__vector_1>:
}



//Interrupt service routine
ISR(INT0_vect){                       //ISR is related to interrupts
 85c:	1f 92       	push	r1
 85e:	0f 92       	push	r0
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	0f 92       	push	r0
 864:	11 24       	eor	r1, r1
 866:	2f 93       	push	r18
 868:	3f 93       	push	r19
 86a:	4f 93       	push	r20
 86c:	5f 93       	push	r21
 86e:	6f 93       	push	r22
 870:	7f 93       	push	r23
 872:	8f 93       	push	r24
 874:	9f 93       	push	r25
 876:	af 93       	push	r26
 878:	bf 93       	push	r27
 87a:	ef 93       	push	r30
 87c:	ff 93       	push	r31
	if(p2f_INT0!=0){    //To check that it hold an address
 87e:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <p2f_INT0>
 882:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <p2f_INT0+0x1>
 886:	30 97       	sbiw	r30, 0x00	; 0
 888:	09 f0       	breq	.+2      	; 0x88c <__stack+0x2d>
		p2f_INT0();			//So, it isn't supposed to be in main
 88a:	09 95       	icall
	}
}										//It should be in the lower layer
 88c:	ff 91       	pop	r31
 88e:	ef 91       	pop	r30
 890:	bf 91       	pop	r27
 892:	af 91       	pop	r26
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	7f 91       	pop	r23
 89a:	6f 91       	pop	r22
 89c:	5f 91       	pop	r21
 89e:	4f 91       	pop	r20
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <__vector_2>:

ISR(INT1_vect){
 8ae:	1f 92       	push	r1
 8b0:	0f 92       	push	r0
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	0f 92       	push	r0
 8b6:	11 24       	eor	r1, r1
 8b8:	2f 93       	push	r18
 8ba:	3f 93       	push	r19
 8bc:	4f 93       	push	r20
 8be:	5f 93       	push	r21
 8c0:	6f 93       	push	r22
 8c2:	7f 93       	push	r23
 8c4:	8f 93       	push	r24
 8c6:	9f 93       	push	r25
 8c8:	af 93       	push	r26
 8ca:	bf 93       	push	r27
 8cc:	ef 93       	push	r30
 8ce:	ff 93       	push	r31
	if(p2f_INT1!=0){
 8d0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <p2f_INT1>
 8d4:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <p2f_INT1+0x1>
 8d8:	30 97       	sbiw	r30, 0x00	; 0
 8da:	09 f0       	breq	.+2      	; 0x8de <__vector_2+0x30>
		p2f_INT1();
 8dc:	09 95       	icall
	}
}
 8de:	ff 91       	pop	r31
 8e0:	ef 91       	pop	r30
 8e2:	bf 91       	pop	r27
 8e4:	af 91       	pop	r26
 8e6:	9f 91       	pop	r25
 8e8:	8f 91       	pop	r24
 8ea:	7f 91       	pop	r23
 8ec:	6f 91       	pop	r22
 8ee:	5f 91       	pop	r21
 8f0:	4f 91       	pop	r20
 8f2:	3f 91       	pop	r19
 8f4:	2f 91       	pop	r18
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

00000900 <__vector_3>:

ISR(INT2_vect){
 900:	1f 92       	push	r1
 902:	0f 92       	push	r0
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	0f 92       	push	r0
 908:	11 24       	eor	r1, r1
 90a:	2f 93       	push	r18
 90c:	3f 93       	push	r19
 90e:	4f 93       	push	r20
 910:	5f 93       	push	r21
 912:	6f 93       	push	r22
 914:	7f 93       	push	r23
 916:	8f 93       	push	r24
 918:	9f 93       	push	r25
 91a:	af 93       	push	r26
 91c:	bf 93       	push	r27
 91e:	ef 93       	push	r30
 920:	ff 93       	push	r31
	if(p2f_INT2!=0){
 922:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <p2f_INT2>
 926:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <p2f_INT2+0x1>
 92a:	30 97       	sbiw	r30, 0x00	; 0
 92c:	09 f0       	breq	.+2      	; 0x930 <__vector_3+0x30>
		p2f_INT2();
 92e:	09 95       	icall
	}
}
 930:	ff 91       	pop	r31
 932:	ef 91       	pop	r30
 934:	bf 91       	pop	r27
 936:	af 91       	pop	r26
 938:	9f 91       	pop	r25
 93a:	8f 91       	pop	r24
 93c:	7f 91       	pop	r23
 93e:	6f 91       	pop	r22
 940:	5f 91       	pop	r21
 942:	4f 91       	pop	r20
 944:	3f 91       	pop	r19
 946:	2f 91       	pop	r18
 948:	0f 90       	pop	r0
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	0f 90       	pop	r0
 94e:	1f 90       	pop	r1
 950:	18 95       	reti

00000952 <timer_init>:
/* Intialaization of timer 0                                        */
/************************************************************************/

void timer_init(void){
	//Initial value
	TCNT0 = 0;
 952:	12 be       	out	0x32, r1	; 50

	#if Timer0_Mode_Select == Timer0_Normal_Mode
	//Normal mode
	CLR_BIT(TCCR0,WGM00);
 954:	83 b7       	in	r24, 0x33	; 51
 956:	8f 7b       	andi	r24, 0xBF	; 191
 958:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
 95a:	83 b7       	in	r24, 0x33	; 51
 95c:	87 7f       	andi	r24, 0xF7	; 247
 95e:	83 bf       	out	0x33, r24	; 51
 960:	08 95       	ret

00000962 <waitOVF_timer0>:
/************************************************************************/
/* Wati until the overflow happens                                                                     */
/************************************************************************/

void waitOVF_timer0(void){
	while(GET_BIT(TIFR,TOV0)==0);  //When the overflow happens(Not used in interrupt mode)
 962:	08 b6       	in	r0, 0x38	; 56
 964:	00 fe       	sbrs	r0, 0
 966:	fd cf       	rjmp	.-6      	; 0x962 <waitOVF_timer0>
	SET_BIT(TIFR,TOV0);   //Clear the overflow manually
 968:	88 b7       	in	r24, 0x38	; 56
 96a:	81 60       	ori	r24, 0x01	; 1
 96c:	88 bf       	out	0x38, r24	; 56
 96e:	08 95       	ret

00000970 <timer_stop>:
/************************************************************************/
/* Stop the timer                                                                     */
/************************************************************************/

void timer_stop(void){
	TCCR0 = 0x00;
 970:	13 be       	out	0x33, r1	; 51
 972:	08 95       	ret

00000974 <Timer0_delay_ms>:

/************************************************************************/
/* To  generate time delay in milliseconds                      */
/************************************************************************/

void Timer0_delay_ms(uint32_t delay){
 974:	8f 92       	push	r8
 976:	9f 92       	push	r9
 978:	af 92       	push	r10
 97a:	bf 92       	push	r11
 97c:	cf 92       	push	r12
 97e:	df 92       	push	r13
 980:	ef 92       	push	r14
 982:	ff 92       	push	r15
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
 988:	4b 01       	movw	r8, r22
 98a:	5c 01       	movw	r10, r24
	// Tick time is 256/10^6 Prescalar/F_CPU Tick time = 0.256 ms
	uint32_t MaxDelay = 256 * 0.256;
	uint32_t NUM_OF_OVERFLOW = ceil(delay/MaxDelay);  
 98c:	21 e4       	ldi	r18, 0x41	; 65
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	50 e0       	ldi	r21, 0x00	; 0
 994:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodsi4>
 998:	ca 01       	movw	r24, r20
 99a:	b9 01       	movw	r22, r18
 99c:	0e 94 3a 06 	call	0xc74	; 0xc74 <__floatunsisf>
 9a0:	0e 94 82 05 	call	0xb04	; 0xb04 <ceil>
 9a4:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fixunssfsi>
 9a8:	6b 01       	movw	r12, r22
 9aa:	7c 01       	movw	r14, r24
	uint8_t InitialVal = 256 - ((delay/0.256)/NUM_OF_OVERFLOW);
 9ac:	c5 01       	movw	r24, r10
 9ae:	b4 01       	movw	r22, r8
 9b0:	0e 94 3a 06 	call	0xc74	; 0xc74 <__floatunsisf>
 9b4:	2f e6       	ldi	r18, 0x6F	; 111
 9b6:	32 e1       	ldi	r19, 0x12	; 18
 9b8:	43 e8       	ldi	r20, 0x83	; 131
 9ba:	5e e3       	ldi	r21, 0x3E	; 62
 9bc:	0e 94 99 05 	call	0xb32	; 0xb32 <__divsf3>
 9c0:	4b 01       	movw	r8, r22
 9c2:	5c 01       	movw	r10, r24
 9c4:	c7 01       	movw	r24, r14
 9c6:	b6 01       	movw	r22, r12
 9c8:	0e 94 3a 06 	call	0xc74	; 0xc74 <__floatunsisf>
 9cc:	9b 01       	movw	r18, r22
 9ce:	ac 01       	movw	r20, r24
 9d0:	c5 01       	movw	r24, r10
 9d2:	b4 01       	movw	r22, r8
 9d4:	0e 94 99 05 	call	0xb32	; 0xb32 <__divsf3>
 9d8:	9b 01       	movw	r18, r22
 9da:	ac 01       	movw	r20, r24
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	80 e8       	ldi	r24, 0x80	; 128
 9e2:	93 e4       	ldi	r25, 0x43	; 67
 9e4:	0e 94 15 05 	call	0xa2a	; 0xa2a <__subsf3>
 9e8:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fixunssfsi>
	
	
	TCNT0 = InitialVal;
 9ec:	62 bf       	out	0x32, r22	; 50
	TCCR0 |= (1<<2);    // Choose the prescalar so, the timer will start
 9ee:	83 b7       	in	r24, 0x33	; 51
 9f0:	84 60       	ori	r24, 0x04	; 4
 9f2:	83 bf       	out	0x33, r24	; 51
	unsigned int overflowcounter = 0;
 9f4:	c0 e0       	ldi	r28, 0x00	; 0
 9f6:	d0 e0       	ldi	r29, 0x00	; 0
	while(overflowcounter < NUM_OF_OVERFLOW){
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <Timer0_delay_ms+0x8c>
		waitOVF_timer0();
 9fa:	0e 94 b1 04 	call	0x962	; 0x962 <waitOVF_timer0>
		overflowcounter++;
 9fe:	21 96       	adiw	r28, 0x01	; 1
	
	
	TCNT0 = InitialVal;
	TCCR0 |= (1<<2);    // Choose the prescalar so, the timer will start
	unsigned int overflowcounter = 0;
	while(overflowcounter < NUM_OF_OVERFLOW){
 a00:	ce 01       	movw	r24, r28
 a02:	a0 e0       	ldi	r26, 0x00	; 0
 a04:	b0 e0       	ldi	r27, 0x00	; 0
 a06:	8c 15       	cp	r24, r12
 a08:	9d 05       	cpc	r25, r13
 a0a:	ae 05       	cpc	r26, r14
 a0c:	bf 05       	cpc	r27, r15
 a0e:	a8 f3       	brcs	.-22     	; 0x9fa <Timer0_delay_ms+0x86>
		waitOVF_timer0();
		overflowcounter++;
	}
	overflowcounter = 0;
	timer_stop();
 a10:	0e 94 b8 04 	call	0x970	; 0x970 <timer_stop>
}
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	ff 90       	pop	r15
 a1a:	ef 90       	pop	r14
 a1c:	df 90       	pop	r13
 a1e:	cf 90       	pop	r12
 a20:	bf 90       	pop	r11
 a22:	af 90       	pop	r10
 a24:	9f 90       	pop	r9
 a26:	8f 90       	pop	r8
 a28:	08 95       	ret

00000a2a <__subsf3>:
 a2a:	50 58       	subi	r21, 0x80	; 128

00000a2c <__addsf3>:
 a2c:	bb 27       	eor	r27, r27
 a2e:	aa 27       	eor	r26, r26
 a30:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__addsf3x>
 a34:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_round>
 a38:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_pscA>
 a3c:	38 f0       	brcs	.+14     	; 0xa4c <__addsf3+0x20>
 a3e:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscB>
 a42:	20 f0       	brcs	.+8      	; 0xa4c <__addsf3+0x20>
 a44:	39 f4       	brne	.+14     	; 0xa54 <__addsf3+0x28>
 a46:	9f 3f       	cpi	r25, 0xFF	; 255
 a48:	19 f4       	brne	.+6      	; 0xa50 <__addsf3+0x24>
 a4a:	26 f4       	brtc	.+8      	; 0xa54 <__addsf3+0x28>
 a4c:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_nan>
 a50:	0e f4       	brtc	.+2      	; 0xa54 <__addsf3+0x28>
 a52:	e0 95       	com	r30
 a54:	e7 fb       	bst	r30, 7
 a56:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_inf>

00000a5a <__addsf3x>:
 a5a:	e9 2f       	mov	r30, r25
 a5c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_split3>
 a60:	58 f3       	brcs	.-42     	; 0xa38 <__addsf3+0xc>
 a62:	ba 17       	cp	r27, r26
 a64:	62 07       	cpc	r22, r18
 a66:	73 07       	cpc	r23, r19
 a68:	84 07       	cpc	r24, r20
 a6a:	95 07       	cpc	r25, r21
 a6c:	20 f0       	brcs	.+8      	; 0xa76 <__addsf3x+0x1c>
 a6e:	79 f4       	brne	.+30     	; 0xa8e <__addsf3x+0x34>
 a70:	a6 f5       	brtc	.+104    	; 0xada <__addsf3x+0x80>
 a72:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__fp_zero>
 a76:	0e f4       	brtc	.+2      	; 0xa7a <__addsf3x+0x20>
 a78:	e0 95       	com	r30
 a7a:	0b 2e       	mov	r0, r27
 a7c:	ba 2f       	mov	r27, r26
 a7e:	a0 2d       	mov	r26, r0
 a80:	0b 01       	movw	r0, r22
 a82:	b9 01       	movw	r22, r18
 a84:	90 01       	movw	r18, r0
 a86:	0c 01       	movw	r0, r24
 a88:	ca 01       	movw	r24, r20
 a8a:	a0 01       	movw	r20, r0
 a8c:	11 24       	eor	r1, r1
 a8e:	ff 27       	eor	r31, r31
 a90:	59 1b       	sub	r21, r25
 a92:	99 f0       	breq	.+38     	; 0xaba <__addsf3x+0x60>
 a94:	59 3f       	cpi	r21, 0xF9	; 249
 a96:	50 f4       	brcc	.+20     	; 0xaac <__addsf3x+0x52>
 a98:	50 3e       	cpi	r21, 0xE0	; 224
 a9a:	68 f1       	brcs	.+90     	; 0xaf6 <__addsf3x+0x9c>
 a9c:	1a 16       	cp	r1, r26
 a9e:	f0 40       	sbci	r31, 0x00	; 0
 aa0:	a2 2f       	mov	r26, r18
 aa2:	23 2f       	mov	r18, r19
 aa4:	34 2f       	mov	r19, r20
 aa6:	44 27       	eor	r20, r20
 aa8:	58 5f       	subi	r21, 0xF8	; 248
 aaa:	f3 cf       	rjmp	.-26     	; 0xa92 <__addsf3x+0x38>
 aac:	46 95       	lsr	r20
 aae:	37 95       	ror	r19
 ab0:	27 95       	ror	r18
 ab2:	a7 95       	ror	r26
 ab4:	f0 40       	sbci	r31, 0x00	; 0
 ab6:	53 95       	inc	r21
 ab8:	c9 f7       	brne	.-14     	; 0xaac <__addsf3x+0x52>
 aba:	7e f4       	brtc	.+30     	; 0xada <__addsf3x+0x80>
 abc:	1f 16       	cp	r1, r31
 abe:	ba 0b       	sbc	r27, r26
 ac0:	62 0b       	sbc	r22, r18
 ac2:	73 0b       	sbc	r23, r19
 ac4:	84 0b       	sbc	r24, r20
 ac6:	ba f0       	brmi	.+46     	; 0xaf6 <__addsf3x+0x9c>
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	a1 f0       	breq	.+40     	; 0xaf4 <__addsf3x+0x9a>
 acc:	ff 0f       	add	r31, r31
 ace:	bb 1f       	adc	r27, r27
 ad0:	66 1f       	adc	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	c2 f7       	brpl	.-16     	; 0xac8 <__addsf3x+0x6e>
 ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <__addsf3x+0x9c>
 ada:	ba 0f       	add	r27, r26
 adc:	62 1f       	adc	r22, r18
 ade:	73 1f       	adc	r23, r19
 ae0:	84 1f       	adc	r24, r20
 ae2:	48 f4       	brcc	.+18     	; 0xaf6 <__addsf3x+0x9c>
 ae4:	87 95       	ror	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	b7 95       	ror	r27
 aec:	f7 95       	ror	r31
 aee:	9e 3f       	cpi	r25, 0xFE	; 254
 af0:	08 f0       	brcs	.+2      	; 0xaf4 <__addsf3x+0x9a>
 af2:	b0 cf       	rjmp	.-160    	; 0xa54 <__addsf3+0x28>
 af4:	93 95       	inc	r25
 af6:	88 0f       	add	r24, r24
 af8:	08 f0       	brcs	.+2      	; 0xafc <__addsf3x+0xa2>
 afa:	99 27       	eor	r25, r25
 afc:	ee 0f       	add	r30, r30
 afe:	97 95       	ror	r25
 b00:	87 95       	ror	r24
 b02:	08 95       	ret

00000b04 <ceil>:
 b04:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_trunc>
 b08:	90 f0       	brcs	.+36     	; 0xb2e <ceil+0x2a>
 b0a:	9f 37       	cpi	r25, 0x7F	; 127
 b0c:	48 f4       	brcc	.+18     	; 0xb20 <ceil+0x1c>
 b0e:	91 11       	cpse	r25, r1
 b10:	16 f4       	brtc	.+4      	; 0xb16 <ceil+0x12>
 b12:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__fp_szero>
 b16:	60 e0       	ldi	r22, 0x00	; 0
 b18:	70 e0       	ldi	r23, 0x00	; 0
 b1a:	80 e8       	ldi	r24, 0x80	; 128
 b1c:	9f e3       	ldi	r25, 0x3F	; 63
 b1e:	08 95       	ret
 b20:	26 f0       	brts	.+8      	; 0xb2a <ceil+0x26>
 b22:	1b 16       	cp	r1, r27
 b24:	61 1d       	adc	r22, r1
 b26:	71 1d       	adc	r23, r1
 b28:	81 1d       	adc	r24, r1
 b2a:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_mintl>
 b2e:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_mpack>

00000b32 <__divsf3>:
 b32:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__divsf3x>
 b36:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_round>
 b3a:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscB>
 b3e:	58 f0       	brcs	.+22     	; 0xb56 <__divsf3+0x24>
 b40:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_pscA>
 b44:	40 f0       	brcs	.+16     	; 0xb56 <__divsf3+0x24>
 b46:	29 f4       	brne	.+10     	; 0xb52 <__divsf3+0x20>
 b48:	5f 3f       	cpi	r21, 0xFF	; 255
 b4a:	29 f0       	breq	.+10     	; 0xb56 <__divsf3+0x24>
 b4c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_inf>
 b50:	51 11       	cpse	r21, r1
 b52:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__fp_szero>
 b56:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_nan>

00000b5a <__divsf3x>:
 b5a:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_split3>
 b5e:	68 f3       	brcs	.-38     	; 0xb3a <__divsf3+0x8>

00000b60 <__divsf3_pse>:
 b60:	99 23       	and	r25, r25
 b62:	b1 f3       	breq	.-20     	; 0xb50 <__divsf3+0x1e>
 b64:	55 23       	and	r21, r21
 b66:	91 f3       	breq	.-28     	; 0xb4c <__divsf3+0x1a>
 b68:	95 1b       	sub	r25, r21
 b6a:	55 0b       	sbc	r21, r21
 b6c:	bb 27       	eor	r27, r27
 b6e:	aa 27       	eor	r26, r26
 b70:	62 17       	cp	r22, r18
 b72:	73 07       	cpc	r23, r19
 b74:	84 07       	cpc	r24, r20
 b76:	38 f0       	brcs	.+14     	; 0xb86 <__divsf3_pse+0x26>
 b78:	9f 5f       	subi	r25, 0xFF	; 255
 b7a:	5f 4f       	sbci	r21, 0xFF	; 255
 b7c:	22 0f       	add	r18, r18
 b7e:	33 1f       	adc	r19, r19
 b80:	44 1f       	adc	r20, r20
 b82:	aa 1f       	adc	r26, r26
 b84:	a9 f3       	breq	.-22     	; 0xb70 <__divsf3_pse+0x10>
 b86:	35 d0       	rcall	.+106    	; 0xbf2 <__divsf3_pse+0x92>
 b88:	0e 2e       	mov	r0, r30
 b8a:	3a f0       	brmi	.+14     	; 0xb9a <__divsf3_pse+0x3a>
 b8c:	e0 e8       	ldi	r30, 0x80	; 128
 b8e:	32 d0       	rcall	.+100    	; 0xbf4 <__divsf3_pse+0x94>
 b90:	91 50       	subi	r25, 0x01	; 1
 b92:	50 40       	sbci	r21, 0x00	; 0
 b94:	e6 95       	lsr	r30
 b96:	00 1c       	adc	r0, r0
 b98:	ca f7       	brpl	.-14     	; 0xb8c <__divsf3_pse+0x2c>
 b9a:	2b d0       	rcall	.+86     	; 0xbf2 <__divsf3_pse+0x92>
 b9c:	fe 2f       	mov	r31, r30
 b9e:	29 d0       	rcall	.+82     	; 0xbf2 <__divsf3_pse+0x92>
 ba0:	66 0f       	add	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	bb 1f       	adc	r27, r27
 ba8:	26 17       	cp	r18, r22
 baa:	37 07       	cpc	r19, r23
 bac:	48 07       	cpc	r20, r24
 bae:	ab 07       	cpc	r26, r27
 bb0:	b0 e8       	ldi	r27, 0x80	; 128
 bb2:	09 f0       	breq	.+2      	; 0xbb6 <__divsf3_pse+0x56>
 bb4:	bb 0b       	sbc	r27, r27
 bb6:	80 2d       	mov	r24, r0
 bb8:	bf 01       	movw	r22, r30
 bba:	ff 27       	eor	r31, r31
 bbc:	93 58       	subi	r25, 0x83	; 131
 bbe:	5f 4f       	sbci	r21, 0xFF	; 255
 bc0:	3a f0       	brmi	.+14     	; 0xbd0 <__divsf3_pse+0x70>
 bc2:	9e 3f       	cpi	r25, 0xFE	; 254
 bc4:	51 05       	cpc	r21, r1
 bc6:	78 f0       	brcs	.+30     	; 0xbe6 <__divsf3_pse+0x86>
 bc8:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_inf>
 bcc:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__fp_szero>
 bd0:	5f 3f       	cpi	r21, 0xFF	; 255
 bd2:	e4 f3       	brlt	.-8      	; 0xbcc <__divsf3_pse+0x6c>
 bd4:	98 3e       	cpi	r25, 0xE8	; 232
 bd6:	d4 f3       	brlt	.-12     	; 0xbcc <__divsf3_pse+0x6c>
 bd8:	86 95       	lsr	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	f7 95       	ror	r31
 be2:	9f 5f       	subi	r25, 0xFF	; 255
 be4:	c9 f7       	brne	.-14     	; 0xbd8 <__divsf3_pse+0x78>
 be6:	88 0f       	add	r24, r24
 be8:	91 1d       	adc	r25, r1
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret
 bf2:	e1 e0       	ldi	r30, 0x01	; 1
 bf4:	66 0f       	add	r22, r22
 bf6:	77 1f       	adc	r23, r23
 bf8:	88 1f       	adc	r24, r24
 bfa:	bb 1f       	adc	r27, r27
 bfc:	62 17       	cp	r22, r18
 bfe:	73 07       	cpc	r23, r19
 c00:	84 07       	cpc	r24, r20
 c02:	ba 07       	cpc	r27, r26
 c04:	20 f0       	brcs	.+8      	; 0xc0e <__divsf3_pse+0xae>
 c06:	62 1b       	sub	r22, r18
 c08:	73 0b       	sbc	r23, r19
 c0a:	84 0b       	sbc	r24, r20
 c0c:	ba 0b       	sbc	r27, r26
 c0e:	ee 1f       	adc	r30, r30
 c10:	88 f7       	brcc	.-30     	; 0xbf4 <__divsf3_pse+0x94>
 c12:	e0 95       	com	r30
 c14:	08 95       	ret

00000c16 <__fixunssfsi>:
 c16:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_splitA>
 c1a:	88 f0       	brcs	.+34     	; 0xc3e <__fixunssfsi+0x28>
 c1c:	9f 57       	subi	r25, 0x7F	; 127
 c1e:	98 f0       	brcs	.+38     	; 0xc46 <__fixunssfsi+0x30>
 c20:	b9 2f       	mov	r27, r25
 c22:	99 27       	eor	r25, r25
 c24:	b7 51       	subi	r27, 0x17	; 23
 c26:	b0 f0       	brcs	.+44     	; 0xc54 <__fixunssfsi+0x3e>
 c28:	e1 f0       	breq	.+56     	; 0xc62 <__fixunssfsi+0x4c>
 c2a:	66 0f       	add	r22, r22
 c2c:	77 1f       	adc	r23, r23
 c2e:	88 1f       	adc	r24, r24
 c30:	99 1f       	adc	r25, r25
 c32:	1a f0       	brmi	.+6      	; 0xc3a <__fixunssfsi+0x24>
 c34:	ba 95       	dec	r27
 c36:	c9 f7       	brne	.-14     	; 0xc2a <__fixunssfsi+0x14>
 c38:	14 c0       	rjmp	.+40     	; 0xc62 <__fixunssfsi+0x4c>
 c3a:	b1 30       	cpi	r27, 0x01	; 1
 c3c:	91 f0       	breq	.+36     	; 0xc62 <__fixunssfsi+0x4c>
 c3e:	0e 94 02 07 	call	0xe04	; 0xe04 <__fp_zero>
 c42:	b1 e0       	ldi	r27, 0x01	; 1
 c44:	08 95       	ret
 c46:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__fp_zero>
 c4a:	67 2f       	mov	r22, r23
 c4c:	78 2f       	mov	r23, r24
 c4e:	88 27       	eor	r24, r24
 c50:	b8 5f       	subi	r27, 0xF8	; 248
 c52:	39 f0       	breq	.+14     	; 0xc62 <__fixunssfsi+0x4c>
 c54:	b9 3f       	cpi	r27, 0xF9	; 249
 c56:	cc f3       	brlt	.-14     	; 0xc4a <__fixunssfsi+0x34>
 c58:	86 95       	lsr	r24
 c5a:	77 95       	ror	r23
 c5c:	67 95       	ror	r22
 c5e:	b3 95       	inc	r27
 c60:	d9 f7       	brne	.-10     	; 0xc58 <__fixunssfsi+0x42>
 c62:	3e f4       	brtc	.+14     	; 0xc72 <__fixunssfsi+0x5c>
 c64:	90 95       	com	r25
 c66:	80 95       	com	r24
 c68:	70 95       	com	r23
 c6a:	61 95       	neg	r22
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	08 95       	ret

00000c74 <__floatunsisf>:
 c74:	e8 94       	clt
 c76:	09 c0       	rjmp	.+18     	; 0xc8a <__floatsisf+0x12>

00000c78 <__floatsisf>:
 c78:	97 fb       	bst	r25, 7
 c7a:	3e f4       	brtc	.+14     	; 0xc8a <__floatsisf+0x12>
 c7c:	90 95       	com	r25
 c7e:	80 95       	com	r24
 c80:	70 95       	com	r23
 c82:	61 95       	neg	r22
 c84:	7f 4f       	sbci	r23, 0xFF	; 255
 c86:	8f 4f       	sbci	r24, 0xFF	; 255
 c88:	9f 4f       	sbci	r25, 0xFF	; 255
 c8a:	99 23       	and	r25, r25
 c8c:	a9 f0       	breq	.+42     	; 0xcb8 <__floatsisf+0x40>
 c8e:	f9 2f       	mov	r31, r25
 c90:	96 e9       	ldi	r25, 0x96	; 150
 c92:	bb 27       	eor	r27, r27
 c94:	93 95       	inc	r25
 c96:	f6 95       	lsr	r31
 c98:	87 95       	ror	r24
 c9a:	77 95       	ror	r23
 c9c:	67 95       	ror	r22
 c9e:	b7 95       	ror	r27
 ca0:	f1 11       	cpse	r31, r1
 ca2:	f8 cf       	rjmp	.-16     	; 0xc94 <__floatsisf+0x1c>
 ca4:	fa f4       	brpl	.+62     	; 0xce4 <__floatsisf+0x6c>
 ca6:	bb 0f       	add	r27, r27
 ca8:	11 f4       	brne	.+4      	; 0xcae <__floatsisf+0x36>
 caa:	60 ff       	sbrs	r22, 0
 cac:	1b c0       	rjmp	.+54     	; 0xce4 <__floatsisf+0x6c>
 cae:	6f 5f       	subi	r22, 0xFF	; 255
 cb0:	7f 4f       	sbci	r23, 0xFF	; 255
 cb2:	8f 4f       	sbci	r24, 0xFF	; 255
 cb4:	9f 4f       	sbci	r25, 0xFF	; 255
 cb6:	16 c0       	rjmp	.+44     	; 0xce4 <__floatsisf+0x6c>
 cb8:	88 23       	and	r24, r24
 cba:	11 f0       	breq	.+4      	; 0xcc0 <__floatsisf+0x48>
 cbc:	96 e9       	ldi	r25, 0x96	; 150
 cbe:	11 c0       	rjmp	.+34     	; 0xce2 <__floatsisf+0x6a>
 cc0:	77 23       	and	r23, r23
 cc2:	21 f0       	breq	.+8      	; 0xccc <__floatsisf+0x54>
 cc4:	9e e8       	ldi	r25, 0x8E	; 142
 cc6:	87 2f       	mov	r24, r23
 cc8:	76 2f       	mov	r23, r22
 cca:	05 c0       	rjmp	.+10     	; 0xcd6 <__floatsisf+0x5e>
 ccc:	66 23       	and	r22, r22
 cce:	71 f0       	breq	.+28     	; 0xcec <__floatsisf+0x74>
 cd0:	96 e8       	ldi	r25, 0x86	; 134
 cd2:	86 2f       	mov	r24, r22
 cd4:	70 e0       	ldi	r23, 0x00	; 0
 cd6:	60 e0       	ldi	r22, 0x00	; 0
 cd8:	2a f0       	brmi	.+10     	; 0xce4 <__floatsisf+0x6c>
 cda:	9a 95       	dec	r25
 cdc:	66 0f       	add	r22, r22
 cde:	77 1f       	adc	r23, r23
 ce0:	88 1f       	adc	r24, r24
 ce2:	da f7       	brpl	.-10     	; 0xcda <__floatsisf+0x62>
 ce4:	88 0f       	add	r24, r24
 ce6:	96 95       	lsr	r25
 ce8:	87 95       	ror	r24
 cea:	97 f9       	bld	r25, 7
 cec:	08 95       	ret

00000cee <__fp_inf>:
 cee:	97 f9       	bld	r25, 7
 cf0:	9f 67       	ori	r25, 0x7F	; 127
 cf2:	80 e8       	ldi	r24, 0x80	; 128
 cf4:	70 e0       	ldi	r23, 0x00	; 0
 cf6:	60 e0       	ldi	r22, 0x00	; 0
 cf8:	08 95       	ret

00000cfa <__fp_mintl>:
 cfa:	88 23       	and	r24, r24
 cfc:	71 f4       	brne	.+28     	; 0xd1a <__fp_mintl+0x20>
 cfe:	77 23       	and	r23, r23
 d00:	21 f0       	breq	.+8      	; 0xd0a <__fp_mintl+0x10>
 d02:	98 50       	subi	r25, 0x08	; 8
 d04:	87 2b       	or	r24, r23
 d06:	76 2f       	mov	r23, r22
 d08:	07 c0       	rjmp	.+14     	; 0xd18 <__fp_mintl+0x1e>
 d0a:	66 23       	and	r22, r22
 d0c:	11 f4       	brne	.+4      	; 0xd12 <__fp_mintl+0x18>
 d0e:	99 27       	eor	r25, r25
 d10:	0d c0       	rjmp	.+26     	; 0xd2c <__fp_mintl+0x32>
 d12:	90 51       	subi	r25, 0x10	; 16
 d14:	86 2b       	or	r24, r22
 d16:	70 e0       	ldi	r23, 0x00	; 0
 d18:	60 e0       	ldi	r22, 0x00	; 0
 d1a:	2a f0       	brmi	.+10     	; 0xd26 <__fp_mintl+0x2c>
 d1c:	9a 95       	dec	r25
 d1e:	66 0f       	add	r22, r22
 d20:	77 1f       	adc	r23, r23
 d22:	88 1f       	adc	r24, r24
 d24:	da f7       	brpl	.-10     	; 0xd1c <__fp_mintl+0x22>
 d26:	88 0f       	add	r24, r24
 d28:	96 95       	lsr	r25
 d2a:	87 95       	ror	r24
 d2c:	97 f9       	bld	r25, 7
 d2e:	08 95       	ret

00000d30 <__fp_mpack>:
 d30:	9f 3f       	cpi	r25, 0xFF	; 255
 d32:	31 f0       	breq	.+12     	; 0xd40 <__fp_mpack_finite+0xc>

00000d34 <__fp_mpack_finite>:
 d34:	91 50       	subi	r25, 0x01	; 1
 d36:	20 f4       	brcc	.+8      	; 0xd40 <__fp_mpack_finite+0xc>
 d38:	87 95       	ror	r24
 d3a:	77 95       	ror	r23
 d3c:	67 95       	ror	r22
 d3e:	b7 95       	ror	r27
 d40:	88 0f       	add	r24, r24
 d42:	91 1d       	adc	r25, r1
 d44:	96 95       	lsr	r25
 d46:	87 95       	ror	r24
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <__fp_nan>:
 d4c:	9f ef       	ldi	r25, 0xFF	; 255
 d4e:	80 ec       	ldi	r24, 0xC0	; 192
 d50:	08 95       	ret

00000d52 <__fp_pscA>:
 d52:	00 24       	eor	r0, r0
 d54:	0a 94       	dec	r0
 d56:	16 16       	cp	r1, r22
 d58:	17 06       	cpc	r1, r23
 d5a:	18 06       	cpc	r1, r24
 d5c:	09 06       	cpc	r0, r25
 d5e:	08 95       	ret

00000d60 <__fp_pscB>:
 d60:	00 24       	eor	r0, r0
 d62:	0a 94       	dec	r0
 d64:	12 16       	cp	r1, r18
 d66:	13 06       	cpc	r1, r19
 d68:	14 06       	cpc	r1, r20
 d6a:	05 06       	cpc	r0, r21
 d6c:	08 95       	ret

00000d6e <__fp_round>:
 d6e:	09 2e       	mov	r0, r25
 d70:	03 94       	inc	r0
 d72:	00 0c       	add	r0, r0
 d74:	11 f4       	brne	.+4      	; 0xd7a <__fp_round+0xc>
 d76:	88 23       	and	r24, r24
 d78:	52 f0       	brmi	.+20     	; 0xd8e <__fp_round+0x20>
 d7a:	bb 0f       	add	r27, r27
 d7c:	40 f4       	brcc	.+16     	; 0xd8e <__fp_round+0x20>
 d7e:	bf 2b       	or	r27, r31
 d80:	11 f4       	brne	.+4      	; 0xd86 <__fp_round+0x18>
 d82:	60 ff       	sbrs	r22, 0
 d84:	04 c0       	rjmp	.+8      	; 0xd8e <__fp_round+0x20>
 d86:	6f 5f       	subi	r22, 0xFF	; 255
 d88:	7f 4f       	sbci	r23, 0xFF	; 255
 d8a:	8f 4f       	sbci	r24, 0xFF	; 255
 d8c:	9f 4f       	sbci	r25, 0xFF	; 255
 d8e:	08 95       	ret

00000d90 <__fp_split3>:
 d90:	57 fd       	sbrc	r21, 7
 d92:	90 58       	subi	r25, 0x80	; 128
 d94:	44 0f       	add	r20, r20
 d96:	55 1f       	adc	r21, r21
 d98:	59 f0       	breq	.+22     	; 0xdb0 <__fp_splitA+0x10>
 d9a:	5f 3f       	cpi	r21, 0xFF	; 255
 d9c:	71 f0       	breq	.+28     	; 0xdba <__fp_splitA+0x1a>
 d9e:	47 95       	ror	r20

00000da0 <__fp_splitA>:
 da0:	88 0f       	add	r24, r24
 da2:	97 fb       	bst	r25, 7
 da4:	99 1f       	adc	r25, r25
 da6:	61 f0       	breq	.+24     	; 0xdc0 <__fp_splitA+0x20>
 da8:	9f 3f       	cpi	r25, 0xFF	; 255
 daa:	79 f0       	breq	.+30     	; 0xdca <__fp_splitA+0x2a>
 dac:	87 95       	ror	r24
 dae:	08 95       	ret
 db0:	12 16       	cp	r1, r18
 db2:	13 06       	cpc	r1, r19
 db4:	14 06       	cpc	r1, r20
 db6:	55 1f       	adc	r21, r21
 db8:	f2 cf       	rjmp	.-28     	; 0xd9e <__fp_split3+0xe>
 dba:	46 95       	lsr	r20
 dbc:	f1 df       	rcall	.-30     	; 0xda0 <__fp_splitA>
 dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <__fp_splitA+0x30>
 dc0:	16 16       	cp	r1, r22
 dc2:	17 06       	cpc	r1, r23
 dc4:	18 06       	cpc	r1, r24
 dc6:	99 1f       	adc	r25, r25
 dc8:	f1 cf       	rjmp	.-30     	; 0xdac <__fp_splitA+0xc>
 dca:	86 95       	lsr	r24
 dcc:	71 05       	cpc	r23, r1
 dce:	61 05       	cpc	r22, r1
 dd0:	08 94       	sec
 dd2:	08 95       	ret

00000dd4 <__fp_trunc>:
 dd4:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_splitA>
 dd8:	a0 f0       	brcs	.+40     	; 0xe02 <__fp_trunc+0x2e>
 dda:	be e7       	ldi	r27, 0x7E	; 126
 ddc:	b9 17       	cp	r27, r25
 dde:	88 f4       	brcc	.+34     	; 0xe02 <__fp_trunc+0x2e>
 de0:	bb 27       	eor	r27, r27
 de2:	9f 38       	cpi	r25, 0x8F	; 143
 de4:	60 f4       	brcc	.+24     	; 0xdfe <__fp_trunc+0x2a>
 de6:	16 16       	cp	r1, r22
 de8:	b1 1d       	adc	r27, r1
 dea:	67 2f       	mov	r22, r23
 dec:	78 2f       	mov	r23, r24
 dee:	88 27       	eor	r24, r24
 df0:	98 5f       	subi	r25, 0xF8	; 248
 df2:	f7 cf       	rjmp	.-18     	; 0xde2 <__fp_trunc+0xe>
 df4:	86 95       	lsr	r24
 df6:	77 95       	ror	r23
 df8:	67 95       	ror	r22
 dfa:	b1 1d       	adc	r27, r1
 dfc:	93 95       	inc	r25
 dfe:	96 39       	cpi	r25, 0x96	; 150
 e00:	c8 f3       	brcs	.-14     	; 0xdf4 <__fp_trunc+0x20>
 e02:	08 95       	ret

00000e04 <__fp_zero>:
 e04:	e8 94       	clt

00000e06 <__fp_szero>:
 e06:	bb 27       	eor	r27, r27
 e08:	66 27       	eor	r22, r22
 e0a:	77 27       	eor	r23, r23
 e0c:	cb 01       	movw	r24, r22
 e0e:	97 f9       	bld	r25, 7
 e10:	08 95       	ret

00000e12 <__udivmodsi4>:
 e12:	a1 e2       	ldi	r26, 0x21	; 33
 e14:	1a 2e       	mov	r1, r26
 e16:	aa 1b       	sub	r26, r26
 e18:	bb 1b       	sub	r27, r27
 e1a:	fd 01       	movw	r30, r26
 e1c:	0d c0       	rjmp	.+26     	; 0xe38 <__udivmodsi4_ep>

00000e1e <__udivmodsi4_loop>:
 e1e:	aa 1f       	adc	r26, r26
 e20:	bb 1f       	adc	r27, r27
 e22:	ee 1f       	adc	r30, r30
 e24:	ff 1f       	adc	r31, r31
 e26:	a2 17       	cp	r26, r18
 e28:	b3 07       	cpc	r27, r19
 e2a:	e4 07       	cpc	r30, r20
 e2c:	f5 07       	cpc	r31, r21
 e2e:	20 f0       	brcs	.+8      	; 0xe38 <__udivmodsi4_ep>
 e30:	a2 1b       	sub	r26, r18
 e32:	b3 0b       	sbc	r27, r19
 e34:	e4 0b       	sbc	r30, r20
 e36:	f5 0b       	sbc	r31, r21

00000e38 <__udivmodsi4_ep>:
 e38:	66 1f       	adc	r22, r22
 e3a:	77 1f       	adc	r23, r23
 e3c:	88 1f       	adc	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	1a 94       	dec	r1
 e42:	69 f7       	brne	.-38     	; 0xe1e <__udivmodsi4_loop>
 e44:	60 95       	com	r22
 e46:	70 95       	com	r23
 e48:	80 95       	com	r24
 e4a:	90 95       	com	r25
 e4c:	9b 01       	movw	r18, r22
 e4e:	ac 01       	movw	r20, r24
 e50:	bd 01       	movw	r22, r26
 e52:	cf 01       	movw	r24, r30
 e54:	08 95       	ret

00000e56 <_exit>:
 e56:	f8 94       	cli

00000e58 <__stop_program>:
 e58:	ff cf       	rjmp	.-2      	; 0xe58 <__stop_program>
